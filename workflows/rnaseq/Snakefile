import sys
import os
import yaml
import tempfile
import pandas as pd

sys.path.insert(0, os.path.dirname(workflow.snakefile) + "/../..")
from lib import utils
from lib.utils import autobump, gb, hours


configfile: 'config/config.yaml'

include: '../../rules/references.smk'

REFERENCES = config.get('reference_dir', '../../references')
sampletable = pd.read_table(config["sampletable"], sep="\t")
sampletable = sampletable.set_index(sampletable.columns[0], drop=False)
is_paired = utils.detect_layout(sampletable) == "PE"
is_sra = utils.detect_sra(sampletable)
n = ["1", "2"] if is_paired else ["1"]
SAMPLES = sampletable.iloc[:, 0].values
patterns = yaml.safe_load(open('config/rnaseq_patterns.yaml'))


wildcard_constraints:
    n = '[1,2]',
    sample = '|'.join(SAMPLES)

localrules: symlinks, symlink_targets

rule all:
    input:
        patterns["multiqc"]

if is_sra:
    include: '../../rules/sra.smk'


rule symlinks:
    input:
        lambda wc: sampletable.loc[wc.sample, ['orig_filename', 'orig_filename_R2']] if is_paired
        else sampletable.loc[wc.sample, ['orig_filename']]
    output:
        expand(patterns["fastq"], n=n, allow_missing=True)
    threads: 1
    resources:
        mem_mb=100,
        runtime=10,
    run:
        assert len(output) == len(input), (input, output)
        for src, linkname in zip(input, output):
            utils.make_relative_symlink(src, linkname)


rule symlink_targets:
    input: 
        expand('data/rnaseq_samples/{sample}/{sample}_R{n}.fastq.gz', sample=SAMPLES, n=n)

# This can be set at the command line with --config strand_check_reads=1000
config.setdefault('strand_check_reads', 1e5)

# TODO: re-enable
# include: '../../rules/strand_check.smk'

include: "../../rules/qc/cutadapt.smk"
include: '../../rules/qc/rrna.smk'
include: "../../rules/qc/markduplicates.smk"
include: "../../rules/qc/collectrnaseqmetrics.smk"
include: "../../rules/qc/preseq.smk"
include: "../../rules/qc/rseqc.smk"
include: "../../rules/ops/samtools.smk"
include: "../../rules/quantify/featurecounts.smk"
include: "../../rules/quantify/salmon.smk"
include: "../../rules/quantify/kallisto.smk"
include: "../../rules/ops/bigwig.smk"
include: "../../rules/qc/fastqc.smk"
include: "../../rules/qc/multiqc.smk"


if config['aligner'] == 'hisat2':
    include: '../../rules/aligners/hisat2.smk'

if config['aligner'].startswith('star'):
    include: '../../rules/aligners/star.smk'


rule fastq_count:
    input:
        fastq='{sample_dir}/{sample}/{sample}{suffix}.fastq.gz'
    output:
        '{sample_dir}/{sample}/{sample}{suffix}.fastq.gz.libsize'
    threads: 1
    resources:
        mem_mb=gb(1),
        runtime=autobump(hours=2)
    shell:
        'zcat {input} | echo $((`wc -l`/4)) > {output}'


rule bam_count:
    input:
        bam='{sample_dir}/{sample}/{suffix}.bam'
    output:
        '{sample_dir}/{sample}/{suffix}.bam.libsize'
    threads: 1
    resources:
        mem_mb=gb(2),
        runtime=autobump(hours=2)
    shell:
        'samtools view -c {input} > {output}'


rule bam_index:
    input:
        bam='{prefix}.bam'
    output:
        bai='{prefix}.bam.bai'
    threads: 1
    resources:
        mem_mb=gb(2),
        runtime=autobump(hours=2)
    shell:
        'samtools index {input} {output}'

