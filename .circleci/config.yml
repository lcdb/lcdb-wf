version: 2

variables:

  # default settings for all steps
  defaults: &defaults
    docker:
      - image: continuumio/miniconda3

  # --------------------------------------------------------------------------
  # The caching dramatically speeds up testing time, because we can do the
  # time-consuming step of conda environment creation once and then use that
  # for subsequent steps.
  #
  # The `initial-setup` job (defined in workflows below) saves the cache when
  # it's done. Here the cache is the miniconda directory. Later jobs
  # (chipseq-step, rnaseq-step, etc) restore that cache to dramatically speed
  # up testing time.
  #
  # The cache key is set to only re-make the cache when the relevant files
  # change. There's also a `v1-` prefix. This should be changed once in a while
  # just to re-trigger an environment rebuild (say, when some critical updates
  # hit bioconda).
  #
  # See https://circleci.com/docs/2.0/caching for details.

  save_cache: &save_cache
    save_cache:
      key: v1-{{ checksum "requirements.txt" }}-{{ checksum ".circleci/setup.sh" }}
      paths:
        - /opt/conda

  restore_cache: &restore_cache
    restore_cache:
      keys:
        - v1-{{ checksum "requirements.txt" }}-{{ checksum ".circleci/setup.sh" }}


  # --------------------------------------------------------------------------
  # Run the setup script, which installs miniconda, sets up bioconda, and
  # installs the global env
  setup: &setup
    run:
      name: Setup conda
      command: .circleci/setup.sh
  # --------------------------------------------------------------------------

  get-data: &get-data
    run:
      name: Download example data
      command: |
        source activate lcdb-wf-test
        apt install -y rsync
        # Note that $DEPLOY is set in the "set-paths" step configured below.
        python deploy.py --flavor full --dest $DEPLOY

        # Separately copy over some test-specific files
        cp workflows/chipseq/run_test.sh $DEPLOY/workflows/chipseq
        cp workflows/rnaseq/run_test.sh $DEPLOY/workflows/rnaseq
        cp workflows/colocalization/run_test.sh $DEPLOY/workflows/references
        cp workflows/colocalization/run_test.sh $DEPLOY/workflows/colocalization
        mkdir $DEPLOY/ci
        cp ci/get-data.py $DEPLOY/ci
        cp ci/preprocessor.py $DEPLOY/ci

        # download example data
        cd $DEPLOY
        python ci/get-data.py

  pytest-step: &pytest-step
    run:
      name: Run pytest suite
      command: |
        source activate lcdb-wf-test
        pytest --doctest-modules lib

  rnaseq-dryrun: &rnaseq-dryrun
      run:
        name: dry run
        command: |
          cd $DEPLOY/workflows/rnaseq
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -n

  chipseq-step: &chipseq-step
      run:
        name: chipseq workflow
        command: |
          cd $DEPLOY/workflows/chipseq
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -j2 -k -p -r
          python chipseq_trackhub.py config/config.yaml config/hub_config.yaml

  chipseq-regression-step: &chipseq-regression-step
      run:
        name: chipseq regression test workflow
        command: |
          ORIG=$(pwd)
          cd $DEPLOY/workflows/chipseq
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -j2 -k -p -r \
            --configfile $ORIG/test/test_configs/test_chipseq_regression.yaml \
            --config sampletable=$ORIG/test/test_configs/chipseq_one_run.tsv \
            --config merged_bigwigs="{}" \
            --until bed_to_bigbed

  references-step: &references-step
      run:
        name: references workflow
        command: |
          cd $DEPLOY/workflows/references
          source activate lcdb-wf-test
          ./run_test.sh  --use-conda -j2 -k -p -r

  rnaseq-step: &rnaseq-step
      run:
        name: rnaseq workflow
        command: |
          cd $DEPLOY/workflows/rnaseq
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -j2 -k -p -r
          python rnaseq_trackhub.py config/config.yaml config/hub_config.yaml

  rnaseq-star-step: &rnaseq-star-step
      run:
        name: rnaseq star aligner
        command: |
          ORIG=$(pwd)
          cd $DEPLOY
          cp -r workflows/rnaseq workflows/rnaseq-star
          cd workflows/rnaseq-star
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -k -p -r \
            --forcerun star \
            --configfile $ORIG/test/test_configs/star_override.yaml \
            --config sampletable=$ORIG/test/test_configs/two_samples.tsv \
            --until star

  rnaseq-sra-step: &rnaseq-sra-step
      run:
        name: rnaseq download from SRA
        command: |
          ORIG=$(pwd)
          cd $DEPLOY
          cp -r workflows/rnaseq workflows/rnaseq-sra-test
          cd workflows/rnaseq-sra-test
          source activate lcdb-wf-test

          ./run_test.sh --use-conda -k -p -r --until cutadapt \
            --configfile $ORIG/test/test_configs/override.yaml \
            --config sampletable=$ORIG/test/test_configs/test_sra_sampletable.tsv

          ./run_test.sh --use-conda -k -p -r --until cutadapt \
            --configfile $ORIG/test/test_configs/override.yaml \
            --config sampletable=$ORIG/test/test_configs/test_sra_sampletable_SE_only.tsv

  rnaseq-pe-step: &rnaseq-pe-step
      run:
        name: rnaseq test PE
        command: |
          ORIG=$(pwd)
          cd $DEPLOY
          cp -r workflows/rnaseq workflows/rnaseq-pe-test
          cd workflows/rnaseq-pe-test
          source activate lcdb-wf-test

          ./run_test.sh --use-conda -k -p -r --until multiqc \
            --configfile $ORIG/test/test_configs/override.yaml \
            --config sampletable=$ORIG/test/test_configs/test_pe_sampletable.tsv

  colocalization-step: &colocalization-step
      run:
        name: colocalization workflow
        command: |
          cd $DEPLOY/workflows/colocalization
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -j2 -k -p -r

  # The path needs to be set each time
  set-path: &set-path
      run:
        name: Set path
        command: |
          apt install -y locales-all locales
          echo 'export DEPLOY=/tmp/lcdb-wf-test' >> $BASH_ENV
          echo 'export LC_ALL=en_US.utf8' >> $BASH_ENV
          echo 'export LANG=en_US.utf8' >> $BASH_ENV
          source $BASH_ENV
jobs:

  # Builds the global conda environment, lcdb-wf-test, and then saves the
  # `miniconda` dir to the cache which can be restored in later jobs.
  initial-setup:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *setup
      - *save_cache

  pytest:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *setup
      - *pytest-step

  chipseq:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *chipseq-step

  chipseq-regression:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *chipseq-regression-step

  rnaseq-dryrun:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *rnaseq-dryrun

  rnaseq:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *rnaseq-step

  rnaseq-star:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *rnaseq-star-step

  rnaseq-sra:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *rnaseq-sra-step


  rnaseq-pe:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *rnaseq-pe-step

  colocalization:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *colocalization-step

  references:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - *get-data
      - *references-step

  build-docs:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - run:
          name: Install sphinx
          command: conda install sphinx -y
      - run:
          name: OK for unknown github host
          command: mkdir -p ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - add_ssh_keys:
          fingerprints:
            - 2d:0c:b4:27:44:cf:f4:50:cc:14:a4:2b:c2:3c:09:06
      - run:
          name: Build and upload docs
          command: source activate lcdb-wf-test && ci/build-docs.sh

  report-env:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *set-path
      - run:
          name: Report environment
          command: conda env export -n lcdb-wf-test


workflows:
  version: 2
  test-suite:
    jobs:
      - initial-setup
      - pytest:
         requires:
           - initial-setup
      - chipseq:
         requires:
           - initial-setup
           - pytest
         filters:
           branches:
             ignore:
               - master
      - chipseq-regression:
         requires:
           - initial-setup
           - pytest
         filters:
           branches:
             ignore:
               - master
      - rnaseq-dryrun:
         requires:
           - initial-setup
           - pytest
      - rnaseq:
          requires:
            - initial-setup
            - pytest
            - rnaseq-dryrun
          filters:
            branches:
              ignore:
                - master
      - rnaseq-star:
          requires:
            - initial-setup
            - pytest
            - rnaseq-dryrun
          filters:
            branches:
              ignore:
                - master
      - rnaseq-sra:
          requires:
            - initial-setup
            - pytest
            - rnaseq-dryrun
          filters:
            branches:
              ignore:
                - master
      - rnaseq-pe:
          requires:
            - initial-setup
            - pytest
            - rnaseq-dryrun
          filters:
            branches:
              ignore:
                - master
      - references:
          requires:
            - initial-setup
            - pytest
          filters:
            branches:
              ignore:
                - master
      - colocalization:
          requires:
            - initial-setup
            - pytest
          filters:
            branches:
              ignore:
                - master
      - build-docs:
          requires:
            - initial-setup

      - report-env:
          requires:
            - rnaseq
            - rnaseq-star
            - chipseq
            - references
            - colocalization
          filters:
            branches:
              ignore:
                - master
