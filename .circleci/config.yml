version: 2

variables:

  # default settings for all steps
  defaults: &defaults
    docker:
      - image: bioconda/bioconda-utils-build-env

  # --------------------------------------------------------------------------
  # The caching dramatically speeds up testing time, because we can do the
  # time-consuming step of conda environment creation once and then use that
  # for subsequent steps.
  #
  # The `initial-setup` job (defined in workflows below) saves the cache when
  # it's done. Here the cache is the miniconda directory. Later jobs
  # (chipseq-step, rnaseq-step, etc) restore that cache to dramatically speed
  # up testing time.
  #
  # The cache key is set to only re-make the cache when the relevant files
  # change. There's also a `v1-` prefix. This should be changed once in a while
  # just to re-trigger an environment rebuild (say, when some critical updates
  # hit bioconda).
  #
  # See https://circleci.com/docs/2.0/caching for details.

  save_cache: &save_cache
    save_cache:
      key: v1-{{ checksum "requirements.txt" }}-{{ checksum ".circleci/setup.sh" }}
      paths:
        - miniconda

  restore_cache: &restore_cache
    restore_cache:
      keys:
        - v1-{{ checksum "requirements.txt" }}-{{ checksum ".circleci/setup.sh" }}


  # --------------------------------------------------------------------------
  # Run the setup script, which installs miniconda, sets up bioconda, and
  # installs the global env
  setup: &setup
    run: 
      name: Setup conda
      command: .circleci/setup.sh
  # --------------------------------------------------------------------------

  get-data: &get-data
    run:
      name: Download example data
      command: |
        source activate lcdb-wf-test
        python ci/get-data.py

  pytest-step: &pytest-step
    run:
      name: Run pytest suite
      command: |
        source activate lcdb-wf-test
        pytest --doctest-modules lib

  chipseq-step: &chipseq-step
      run:
        name: chipseq workflow
        command: |
          cd workflows/chipseq
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -j2 -k -p -r
          python chipseq_trackhub.py config/config.yaml config/hub_config.yaml

  references-step: &references-step
      run:
        name: references workflow
        command: |
          cd workflows/references
          source activate lcdb-wf-test
          ./run_test.sh  --use-conda -j2 -k -p -r

  rnaseq-step: &rnaseq-step
      run:
        name: rnaseq workflow
        command: |
          cd workflows/rnaseq
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -j2 -k -p -r
          python rnaseq_trackhub.py config/config.yaml config/hub_config.yaml

  rnaseq-star-step: &rnaseq-star-step
      run:
        name: rnaseq star aligner
        command: |
          cp -r workflows/rnaseq workflows/rnaseq-star
          cd workflows/rnaseq-star
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -k -p -r \
            --forcerun star \
            --configfile ../../test/test_configs/star_override.yaml \
            --config sampletable=../../test/test_configs/two_samples.tsv \
            --until star

  rnaseq-sra-step: &rnaseq-sra-step
      run:
        name: rnaseq download from SRA
        command: |
          cp -r workflows/rnaseq workflows/rnaseq-sra-test
          cd workflows/rnaseq-sra-test
          source activate lcdb-wf-test

          ./run_test.sh --use-conda -k -p -r --until cutadapt \
            --configfile ../../test/test_configs/override.yaml \
            --config sampletable=../../test/test_configs/test_sra_sampletable.tsv

          ./run_test.sh --use-conda -k -p -r --until cutadapt \
            --configfile ../../test/test_configs/override.yaml \
            --config sampletable=../../test/test_configs/test_sra_sampletable_SE_only.tsv

  colocalization-step: &colocalization-step
      run:
        name: colocalization workflow
        command: |
          cd workflows/colocalization
          source activate lcdb-wf-test
          ./run_test.sh --use-conda -j2 -k -p -r

  # The path needs to be set each time
  set-path: &set-path
      run:
        name: Set path
        command: |
          echo 'export PATH=$PATH:/root/project/miniconda/bin' >> $BASH_ENV
          source $BASH_ENV
jobs:

  # Builds the global conda environment, lcdb-wf-test, and then saves the
  # `miniconda` dir to the cache which can be restored in later jobs.
  initial-setup:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *setup
      - *save_cache


  build-docs:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - 99:b4:dd:2c:82:9a:27:07:ca:b4:eb:bf:9c:49:4a:72
      - checkout
      - *restore_cache
      - *set-path
      - run:
          name: Install sphinx
          command: conda install sphinx -y
      - run:
          name: OK for unknown github host
          command: mkdir -p ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run:
          name: Install git
          command: yum install git -y
      - run:
          name: Build and upload docs
          command: source activate lcdb-wf-test && ci/build-docs.sh



workflows:
  version: 2
  test-suite:
    jobs:
      - initial-setup
      - build-docs:
          requires:
            - initial-setup
